#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status.
# Exit on unset variables. Exit on pipeline errors.
set -euo pipefail

# --- Configuration ---
# Define the fonts you want to install here directly in arrays.
# Alternatively, read these from text files if you prefer.
# NOTE: Nerd Font names must match the asset name on GitHub releases (e.g., FiraCode -> FiraCode.zip)
# NOTE: Google Font names must match the name used by Google Fonts.
NERD_FONTS_TO_INSTALL=(
    "FiraCode"
    "JetBrainsMono"
)

GOOGLE_FONTS_TO_INSTALL=(
    "Victor Mono"
)

# --- Constants ---
NERDFONTS_API_URL="https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest"
GOOGLEFONTS_DOWNLOAD_URL="https://fonts.google.com/download?family="
TMP_DIR="/tmp/font-downloads-$$" # Use PID for unique temp dir

# --- Helper Functions ---

# Fetches the download URL for a specific asset from the latest GitHub release
get_latest_release_asset_url() {
    local repo="$1"
    local asset_name="$2"
    local api_url="https://api.github.com/repos/${repo}/releases/latest"
    local download_url

    echo "INFO: Fetching latest release info for ${repo}..." >&2
    # Fetch API data, handle potential rate limits gracefully (though unlikely for single builds)
    api_response=$(curl -sSL --fail -H "Accept: application/vnd.github.v3+json" "${api_url}") || {
        echo "ERROR: Failed to fetch release info from ${api_url}. Check network or API rate limits." >&2
        return 1 # Use return code to signal failure
    }

    # Use jq to find the asset URL
    download_url=$(echo "$api_response" | jq -r --arg ASSET_NAME "${asset_name}" '.assets[] | select(.name == $ASSET_NAME) | .browser_download_url')

    if [[ -z "$download_url" || "$download_url" == "null" ]]; then
        echo "ERROR: Could not find asset '${asset_name}' in the latest release of ${repo}." >&2
        # Optional: List available assets for debugging
        # echo "Available assets:" >&2
        # echo "$api_response" | jq -r '.assets[].name' >&2
        return 1 # Use return code to signal failure
    fi
    echo "${download_url}" # Success, output the URL
    return 0
}

# URL-encodes a string (requires jq 1.6+ OR python3)
url_encode() {
    # Prefer jq 1.6+ @uri for bash-centric approach if available
    if command -v jq &>/dev/null && jq --version | grep -q 'jq-1\.6'; then
         jq -sRr @uri <<< "$1"
    elif command -v python3 &> /dev/null; then
        python3 -c "import urllib.parse; print(urllib.parse.quote_plus('${1}'))"
    else
        echo "ERROR: Need jq 1.6+ or python3 for URL encoding." >&2
        exit 1
    fi
}

# --- Dependencies Check ---
# (Ensure curl, unzip, jq, and python3 (if needed for url_encode) are installed by your build process)
for cmd in curl unzip jq; do
    if ! command -v $cmd &> /dev/null; then
        echo "Error: Required command '$cmd' not found. Please install it." >&2
        exit 1
    fi
done
# Check for URL encoding tool specifically if Google Fonts are listed
if [[ ${#GOOGLE_FONTS_TO_INSTALL[@]} -gt 0 ]]; then
    if ! (command -v jq &>/dev/null && jq --version | grep -q 'jq-1\.6') && ! command -v python3 &> /dev/null; then
       echo "Error: Need jq 1.6+ or python3 for URL encoding Google Font names." >&2
       exit 1
    fi
fi


# --- Main Execution ---
echo "Starting flexible font installation..."
mkdir -p "${TMP_DIR}"
# Ensure cleanup happens even on script exit/error
trap 'echo "Cleaning up temp dir ${TMP_DIR}..."; cd / && rm -rf "${TMP_DIR}"' EXIT

cd "${TMP_DIR}"

# --- Install Nerd Fonts ---
if [[ ${#NERD_FONTS_TO_INSTALL[@]} -gt 0 ]]; then
    echo "--- Installing Nerd Fonts ---"
    for font_name in "${NERD_FONTS_TO_INSTALL[@]}"; do
        echo "Processing Nerd Font: ${font_name}"
        asset_name="${font_name}.zip"
        target_dir="/usr/share/fonts/nerd-fonts/${font_name}"

        # Get URL using helper function, check return code
        download_url=$(get_latest_release_asset_url "ryanoasis/nerd-fonts" "${asset_name}")
        if [[ $? -ne 0 ]]; then
             echo "WARN: Skipping Nerd Font ${font_name} due to error getting URL." >&2
             continue # Skip to next font
        fi

        echo "INFO: Downloading ${font_name} from ${download_url}"
        if curl -L -o "${font_name}.zip" --fail "${download_url}"; then
            echo "INFO: Extracting ${font_name}"
            # Create target dir only after successful download
            mkdir -p "${target_dir}"
            # Extract, find fonts, move, and clean up within this block
            if unzip -q "${font_name}.zip" -d "${font_name}_extracted"; then
                find "${font_name}_extracted" -name '*.[ot]tf' -print0 | xargs -0 -I {} mv {} "${target_dir}/" || echo "WARN: No font files found or moved for ${font_name}." >&2
            else
                echo "WARN: Failed to extract ${font_name}.zip." >&2
            fi
            rm -rf "${font_name}_extracted" # Clean extracted dir regardless of find success
        else
             echo "WARN: Failed to download ${font_name}.zip." >&2
        fi
        # Clean zip file even if extraction failed
        rm -f "${font_name}.zip"
    done
else
    echo "INFO: No Nerd Fonts specified for installation."
fi


# --- Install Google Fonts ---
if [[ ${#GOOGLE_FONTS_TO_INSTALL[@]} -gt 0 ]]; then
    echo "--- Installing Google Fonts ---"
     for font_name in "${GOOGLE_FONTS_TO_INSTALL[@]}"; do
        echo "Processing Google Font: ${font_name}"
        # Sanitize font name for directory creation (replace spaces with underscores)
        safe_dir_name=$(echo "${font_name}" | tr ' ' '_')
        target_dir="/usr/share/fonts/google-fonts/${safe_dir_name}"

        # URL Encode the font name for the query parameter
        encoded_name=$(url_encode "${font_name}")
        download_url="${GOOGLEFONTS_DOWNLOAD_URL}${encoded_name}"

        echo "INFO: Downloading ${font_name} from ${download_url}"
        # Google download URL can sometimes fail, use --fail
        if curl -L -o "${font_name}.zip" --fail "${download_url}"; then
             echo "INFO: Extracting ${font_name}"
             # Create target dir only after successful download
             mkdir -p "${target_dir}"
             # Google Fonts zips usually contain TTFs, often directly or in static/ subdir
             if unzip -q "${font_name}.zip" -d "${font_name}_extracted"; then
                # Find TTFs (most common format from Google Fonts download)
                find "${font_name}_extracted" -name '*.ttf' -print0 | xargs -0 -I {} mv {} "${target_dir}/" || echo "WARN: No TTF files found or moved for Google Font ${font_name}." >&2
             else
                echo "WARN: Failed to extract ${font_name}.zip." >&2
             fi
             rm -rf "${font_name}_extracted"
        else
             echo "WARN: Failed to download ${font_name} from Google Fonts URL. It might be invalid or unavailable." >&2
        fi
         rm -f "${font_name}.zip"
    done
else
     echo "INFO: No Google Fonts specified for installation."
fi


# --- Final Font Cache Update ---
echo "Updating font cache..."
fc-cache -fsv

# Trap handles cleanup on EXIT

echo "Font installation script finished."

